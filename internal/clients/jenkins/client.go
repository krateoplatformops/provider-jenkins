package jenkins

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
)

type HTTPStatusError struct {
	URL    string
	Code   int
	Status string
}

func (e *HTTPStatusError) Error() string {
	return fmt.Sprintf("bad http status: %d: %s", e.Code, e.Status)
}

type Auth struct {
	Username string
	ApiToken string
}

type ClientOpts struct {
	BaseUrl    string
	Controller string
	Auth       *Auth
	HttpClient *http.Client
}

type Client struct {
	baseUrl    string
	controller string
	auth       *Auth
	httpClient *http.Client
	crumbData  map[string]string
}

func NewClient(opts *ClientOpts) *Client {
	return &Client{
		baseUrl:    opts.BaseUrl,
		controller: opts.Controller,
		auth:       opts.Auth,
		httpClient: opts.HttpClient,
		crumbData:  make(map[string]string),
	}
}

func (c *Client) GetJobConfig(ctx context.Context, name string) ([]byte, error) {
	uri, err := url.Parse(c.baseUrl)
	if err != nil {
		return nil, err
	}
	uri.Path = path.Join(uri.Path, c.controller, "job", name, "config.xml")

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, uri.String(), nil)
	if err != nil {
		return nil, err
	}

	rsp, err := c.doRequest(req)
	if err != nil {
		return nil, err
	}

	if rsp.Body == nil {
		return nil, nil
	}
	defer rsp.Body.Close()

	return io.ReadAll(rsp.Body)
}

func (c *Client) CreateJob(ctx context.Context, name string, data []byte) error {
	uri, err := url.Parse(c.baseUrl)
	if err != nil {
		return err
	}
	uri.Path = path.Join(uri.Path, c.controller, "createItem")

	query := make(url.Values)
	query.Set("name", name)
	uri.RawQuery = query.Encode()

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, uri.String(), bytes.NewReader(data))
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/xml")

	_, err = c.doRequest(req)
	return err
}

func (c *Client) DeleteJob(ctx context.Context, name string) error {
	uri, err := url.Parse(c.baseUrl)
	if err != nil {
		return err
	}

	rel, _ := url.Parse(fmt.Sprintf("%s/", path.Join(c.controller, "job", name)))
	uri = uri.ResolveReference(rel)

	req, err := http.NewRequestWithContext(ctx, http.MethodDelete, uri.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.doRequest(req)
	return err
}

func (c *Client) doRequest(req *http.Request) (*http.Response, error) {
	if c.auth != nil {
		req.SetBasicAuth(c.auth.Username, c.auth.ApiToken)
	}

	rsp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	if rsp.StatusCode < http.StatusOK || rsp.StatusCode > http.StatusMultipleChoices {
		return nil, &HTTPStatusError{
			URL:    req.URL.String(),
			Code:   rsp.StatusCode,
			Status: rsp.Status,
		}
	}

	return rsp, nil
}

// UseCrumbs - checks if `useCrumb` is enabled
func (c *Client) UseCrumbs(ctx context.Context) (bool, error) {
	uri, err := url.Parse(c.baseUrl)
	if err != nil {
		return false, err
	}
	uri.Path = path.Join(uri.Path, "api/json")
	uri.RawQuery = url.Values{"tree": []string{"useCrumbs"}}.Encode()

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, uri.String(), nil)
	if err != nil {
		return false, err
	}

	rsp, err := c.doRequest(req)
	if err != nil {
		return false, err
	}

	if rsp.Body == nil {
		return false, nil
	}
	defer rsp.Body.Close()

	dat, err := io.ReadAll(rsp.Body)
	if err != nil {
		return false, err
	}

	// api - store jenkins api useCrumbs response
	api := struct {
		UseCrumbs bool `json:"useCrumbs"`
	}{}
	if err := json.Unmarshal(dat, &api); err != nil {
		return false, err
	}

	return api.UseCrumbs, nil
}

// GetCrumbs - fetch crumb data (kind of token) generated by Jenkins itself.
// Needed when CSRF is enabled on your Jenkins server
// http://<jenkins_url>/crumbIssuer/api/json
func (c *Client) GetCrumbs(ctx context.Context) (string, string, error) {
	uri, err := url.Parse(c.baseUrl)
	if err != nil {
		return "", "", err
	}
	uri.Path = path.Join(uri.Path, "crumbIssuer/api/json")
	//uri.RawQuery = url.Values{"tree": []string{"crumb"}}.Encode()

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, uri.String(), nil)
	if err != nil {
		return "", "", err
	}

	rsp, err := c.doRequest(req)
	if err != nil {
		return "", "", err
	}

	if rsp.Body == nil {
		return "", "", nil
	}
	defer rsp.Body.Close()

	dat, err := io.ReadAll(rsp.Body)
	if err != nil {
		return "", "", err
	}

	// res - store jenkins api response
	res := struct {
		Crumb             string `json:"crumb"`
		CrumbRequestField string `json:"crumbRequestField"`
	}{}
	if err := json.Unmarshal(dat, &res); err != nil {
		return "", "", err
	}

	return res.CrumbRequestField, res.Crumb, nil
}

func (c *Client) setCrumbsEventually(req *http.Request) error {
	ok, err := c.UseCrumbs(context.TODO())
	if err != nil {
		return err
	}

	if !ok {
		return nil
	}

	key, val, err := c.GetCrumbs(context.TODO())
	if err != nil {
		return err
	}

	req.Header.Set(key, val)

	return nil
}
